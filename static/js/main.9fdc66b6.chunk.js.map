{"version":3,"sources":["components/currency/images/credit.svg","components/currency/images/land.svg","components/currency/images/redcircle.svg","components/currency/images/greencircle.svg","components/currency/images/bluecircle.svg","components/buildings/BuildingCard.tsx","gamelogic/building/cost.ts","gamelogic/building/growth.ts","gamelogic/state.ts","components/currency/CurrencyAmount.tsx","components/currency/ResourceChart.tsx","components/BuyButton.tsx","components/Router.tsx","components/Sidebar.tsx","components/ProgressBar.tsx","components/StatusHeader.tsx","gamelogic/building/buildinglist.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","BuildingCard","props","className","building","displayName","growth","resource","calculateCost","existingBuildings","newBuilding","costs","computedCost","Object","fromEntries","map","c","initial","cost","type","roundToNearest","Math","floor","factor","applyBuildingGrowth","resourceState","updateCount","growthKind","randomBinomial","p","canAfford","resources","prop","gameReducer","state","action","newState","newResourceState","buildings","computeResourceState","count","lastUpdate","when","s","a","b","score","MakeCurrencyComponent","image","alt","undefined","amount","src","val","toLocaleString","toExponential","CreditAmount","credit","LandAmount","land","RedCircleAmount","redcircle","GreenCircleAmount","greencircle","BlueCircleAmount","bluecircle","ResourceChart","BuyButton","affordable","onClick","initialPageLinks","active","changePage","pageLinks","newPage","link","Router","pageState","pageLink","pages","Sidebar","onDismiss","page","i","key","onNavigate","React","memo","duration","onTick","style","animationDuration","fillRef","useRef","useEffect","current","classList","add","interval","setInterval","remove","offsetHeight","clearInterval","ref","prevProps","nextProps","StatusHeader","msPerTick","id","onHamburgerClick","buildingDetails","App","useReducer","gameState","gameDispatch","pagelinks","navigatePage","loadedState","save","localStorage","getItem","loaded","JSON","parse","__version","loadGameState","now","Date","getTime","delta","tick","useCallback","setItem","stringify","buyBasic","useState","sidebarActive","setSidebarActive","toggleSidebar","v","buy","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9fdc66b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/credit.7abc0ac4.svg\";","module.exports = __webpack_public_path__ + \"static/media/land.787d1085.svg\";","module.exports = __webpack_public_path__ + \"static/media/redcircle.5819b0ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/greencircle.3ea27515.svg\";","module.exports = __webpack_public_path__ + \"static/media/bluecircle.3cc723b7.svg\";","import React from 'react';\r\nimport { BuildingDetails } from '../../gamelogic/building/buildinglist';\r\nimport './BuildingCard.css';\r\n\r\ninterface Props {\r\n    building: BuildingDetails;\r\n}\r\n\r\nfunction BuildingCard(props: Props) {\r\n    return (\r\n        <div className=\"Building-card\">\r\n            <span>{props.building.displayName}</span>\r\n            <br />\r\n            <span>{props.building.growth.resource}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BuildingCard;\r\n","import { ResourceKind, ResourceState } from '../state';\r\nimport { BuildingID } from './buildinglist';\r\n\r\ninterface ExponentialCost {\r\n    type: 'exponential';\r\n    resource: ResourceKind;\r\n    initial: number;\r\n    factor: number;\r\n    roundToNearest: number;\r\n}\r\n\r\nexport type Cost = ExponentialCost;\r\nexport type MultiCost = Cost[];\r\n\r\nexport function calculateCost(\r\n    existingBuildings: BuildingID[],\r\n    newBuilding: BuildingID,\r\n    costs: MultiCost\r\n): Partial<ResourceState> {\r\n    let computedCost = Object.fromEntries(\r\n        costs.map((c) => [c.resource, c.initial])\r\n    ) as Partial<ResourceState>;\r\n\r\n    for (const building of existingBuildings) {\r\n        if (building === newBuilding) {\r\n            // existing building found, increase cost accordingly\r\n            for (const cost of costs) {\r\n                switch (cost.type) {\r\n                    case 'exponential':\r\n                        computedCost[cost.resource] =\r\n                            cost.roundToNearest *\r\n                            Math.floor(\r\n                                (cost.factor *\r\n                                    (computedCost[cost.resource] as number)) /\r\n                                    cost.roundToNearest\r\n                            );\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return computedCost;\r\n}\r\n","import { randomBinomial } from 'd3-random';\r\nimport { ResourceKind, ResourceState } from '../state';\r\n\r\ninterface BinomialGrowth {\r\n    type: 'binomial';\r\n    resource: ResourceKind;\r\n    p: number;\r\n}\r\nexport type Growth = BinomialGrowth;\r\n\r\nexport function applyBuildingGrowth(\r\n    resourceState: ResourceState,\r\n    updateCount: number,\r\n    growthKind: Growth\r\n): ResourceState {\r\n    switch (growthKind.type) {\r\n        case 'binomial':\r\n            return {\r\n                ...resourceState,\r\n                [growthKind.resource]:\r\n                    resourceState[growthKind.resource] +\r\n                    randomBinomial(updateCount, growthKind.p)(),\r\n            };\r\n    }\r\n}\r\n","import { BuildingDetails } from './building/buildinglist';\r\nimport { calculateCost } from './building/cost';\r\nimport { applyBuildingGrowth } from './building/growth';\r\n\r\nconst CURRENT_VERSION = 1;\r\n\r\nexport type ResourceKind = 'score';\r\nexport type ResourceState = { [kind in ResourceKind]: number };\r\n\r\nexport function subtractResources(\r\n    a: Partial<ResourceState>,\r\n    b: Partial<ResourceState>\r\n): ResourceState {\r\n    return {\r\n        score: (a.score || 0) - (b.score || 0),\r\n    };\r\n}\r\nexport function canAfford(\r\n    resources: ResourceState,\r\n    cost: Partial<ResourceState>\r\n): boolean {\r\n    for (const prop in cost) {\r\n        // if any cost exceeds current resources, cannot afford\r\n        if ((cost[prop as ResourceKind] || 0) > resources[prop as ResourceKind])\r\n            return false;\r\n    }\r\n\r\n    return true;\r\n}\r\n\r\nexport interface GameState {\r\n    resourceState: ResourceState;\r\n    buildings: BuildingDetails[];\r\n    lastUpdate: number | null;\r\n}\r\n\r\nexport function loadGameState(): GameState | null {\r\n    const save = localStorage.getItem('saveFile');\r\n    if (save) {\r\n        const loaded = JSON.parse(save);\r\n        const version = loaded.__version || 0;\r\n        if (version < CURRENT_VERSION) return null;\r\n        return loaded as GameState;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function saveGameState(state: GameState) {\r\n    localStorage.setItem(\r\n        'saveFile',\r\n        JSON.stringify({\r\n            ...state,\r\n            __version: CURRENT_VERSION,\r\n        })\r\n    );\r\n}\r\n\r\nfunction computeResourceState(\r\n    state: GameState,\r\n    updateCount: number\r\n): ResourceState {\r\n    let resourceState = state.resourceState;\r\n\r\n    for (const building of state.buildings) {\r\n        resourceState = applyBuildingGrowth(\r\n            resourceState,\r\n            updateCount,\r\n            building.growth\r\n        );\r\n    }\r\n\r\n    return resourceState;\r\n}\r\n\r\ninterface AssignAction {\r\n    type: 'assign';\r\n    newState: GameState;\r\n}\r\ninterface FastForwarAction {\r\n    type: 'fastForward';\r\n    count: number;\r\n    when: number;\r\n}\r\ninterface TryPurchaseBuilding {\r\n    type: 'tryPurchaseBuilding';\r\n    building: BuildingDetails;\r\n}\r\ntype GameAction = AssignAction | FastForwarAction | TryPurchaseBuilding;\r\nexport function gameReducer(state: GameState, action: GameAction): GameState {\r\n    switch (action.type) {\r\n        case 'assign':\r\n            return action.newState;\r\n        case 'fastForward':\r\n            const newResourceState = computeResourceState(state, action.count);\r\n            const newState = {\r\n                ...state,\r\n                resourceState: newResourceState,\r\n                lastUpdate: action.when,\r\n            };\r\n            return newState;\r\n        case 'tryPurchaseBuilding':\r\n            const cost = calculateCost(\r\n                state.buildings.map((s) => s.type),\r\n                action.building.type,\r\n                action.building.cost\r\n            );\r\n            const affordable = canAfford(state.resourceState, cost);\r\n\r\n            if (!affordable) return state;\r\n\r\n            return {\r\n                ...state,\r\n                resourceState: subtractResources(state.resourceState, cost),\r\n                buildings: [...state.buildings, action.building],\r\n            };\r\n    }\r\n}\r\n","import React from 'react';\r\nimport './CurrencyAmount.css';\r\nimport credit from './images/credit.svg';\r\nimport land from './images/land.svg';\r\nimport redcircle from './images/redcircle.svg';\r\nimport greencircle from './images/greencircle.svg';\r\nimport bluecircle from './images/bluecircle.svg';\r\n\r\ninterface Props {\r\n    amount?: number;\r\n}\r\n\r\nfunction formatUnit(val: number) {\r\n    if (val < 1e10) return val.toLocaleString();\r\n    return val.toExponential(3);\r\n}\r\n\r\nfunction MakeCurrencyComponent(image: string, alt: string) {\r\n    return function (props: Props) {\r\n        if (props.amount === undefined) return <></>;\r\n        return (\r\n            <div className=\"inline\">\r\n                <img src={image} className=\"icon\" alt={alt}></img>\r\n                <div className=\"quantity\">{formatUnit(props.amount)}</div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst CreditAmount = MakeCurrencyComponent(credit, 'credits');\r\nconst LandAmount = MakeCurrencyComponent(land, 'land');\r\nconst RedCircleAmount = MakeCurrencyComponent(redcircle, 'redcircle');\r\nconst GreenCircleAmount = MakeCurrencyComponent(greencircle, 'greencircle');\r\nconst BlueCircleAmount = MakeCurrencyComponent(bluecircle, 'bluecircle');\r\n\r\nexport {\r\n    CreditAmount,\r\n    LandAmount,\r\n    RedCircleAmount,\r\n    GreenCircleAmount,\r\n    BlueCircleAmount,\r\n};\r\n","import React from 'react';\r\nimport { ResourceState } from '../../gamelogic/state';\r\nimport {\r\n    BlueCircleAmount,\r\n    CreditAmount,\r\n    GreenCircleAmount,\r\n    LandAmount,\r\n    RedCircleAmount,\r\n} from './CurrencyAmount';\r\nimport './ResourceChart.css';\r\n\r\ninterface Props {\r\n    resourceState: Partial<ResourceState>;\r\n}\r\n\r\nfunction ResourceChart(props: Props) {\r\n    return (\r\n        <div className=\"Chart-container\">\r\n            <div className=\"Chart-column\">\r\n                <CreditAmount amount={props.resourceState.score} />\r\n                <LandAmount amount={0} />\r\n            </div>\r\n            <div className=\"Chart-column\">\r\n                <RedCircleAmount amount={0} />\r\n                <GreenCircleAmount amount={0} />\r\n                <BlueCircleAmount amount={0} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResourceChart;\r\n","import React from 'react';\r\nimport { BuildingDetails } from '../gamelogic/building/buildinglist';\r\nimport { calculateCost } from '../gamelogic/building/cost';\r\nimport { canAfford, ResourceState } from '../gamelogic/state';\r\nimport './BuyButton.css';\r\nimport ResourceChart from './currency/ResourceChart';\r\n\r\ninterface Props {\r\n    onClick: () => any;\r\n    building: BuildingDetails;\r\n    buildings: BuildingDetails[];\r\n    resources: ResourceState;\r\n}\r\n\r\nfunction BuyButton(props: Props) {\r\n    const cost = calculateCost(\r\n        props.buildings.map((s) => s.type),\r\n        props.building.type,\r\n        props.building.cost\r\n    );\r\n\r\n    const affordable = canAfford(props.resources, cost);\r\n\r\n    return (\r\n        <div\r\n            className={`Button-card${affordable ? '' : ' Disabled'}`}\r\n            onClick={affordable ? props.onClick : undefined}\r\n        >\r\n            <h3>{`Buy ${props.building.displayName}`}</h3>\r\n            <ResourceChart resourceState={cost}></ResourceChart>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BuyButton;\r\n","import React from 'react';\r\n\r\nexport type Page = 'building' | 'buy';\r\n\r\nexport interface PageLink {\r\n    type: Page;\r\n    displayName: string;\r\n    active: boolean;\r\n}\r\n\r\nexport const initialPageLinks: PageLink[] = [\r\n    {\r\n        type: 'building',\r\n        active: true,\r\n        displayName: 'Buildings',\r\n    },\r\n    {\r\n        type: 'buy',\r\n        active: false,\r\n        displayName: 'Buy',\r\n    },\r\n];\r\nexport function changePage(pageLinks: PageLink[], newPage: Page): PageLink[] {\r\n    return pageLinks.map((link) => {\r\n        return {\r\n            ...link,\r\n            active: link.type === newPage,\r\n        };\r\n    });\r\n}\r\n\r\ninterface Props {\r\n    pageState: PageLink[];\r\n    pages: { [page in Page]: JSX.Element };\r\n}\r\nexport default function Router(props: Props) {\r\n    for (const pageLink of props.pageState) {\r\n        if (pageLink.active) return props.pages[pageLink.type];\r\n    }\r\n\r\n    return <></>;\r\n}\r\n","import React from 'react';\r\nimport { Page, PageLink } from './Router';\r\nimport './Sidebar.css';\r\n\r\ninterface Props {\r\n    active: boolean;\r\n    onDismiss: () => any;\r\n    pages: PageLink[];\r\n    onNavigate: (page: Page) => any;\r\n}\r\n\r\nfunction Sidebar(props: Props) {\r\n    return (\r\n        <>\r\n            <div\r\n                className={`Shroud${props.active ? ' Active' : ''}`}\r\n                onClick={props.onDismiss}\r\n            ></div>\r\n            <nav className={`Sidebar${props.active ? ' Active' : ''}`}>\r\n                {props.pages.map((page, i) => {\r\n                    return (\r\n                        <span\r\n                            key={i}\r\n                            className={`Navlink${page.active ? ' Active' : ''}`}\r\n                            onClick={() => props.onNavigate(page.type)}\r\n                        >\r\n                            {page.displayName}\r\n                        </span>\r\n                    );\r\n                })}\r\n            </nav>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Sidebar;\r\n","import React, { CSSProperties, useEffect, useRef } from 'react';\r\nimport './ProgressBar.css';\r\n\r\ninterface Props {\r\n    duration: number;\r\n    onTick: () => any;\r\n}\r\n\r\nfunction ProgressBar(props: Props) {\r\n    const { duration, onTick } = props;\r\n\r\n    const style: CSSProperties = {\r\n        animationDuration: `${duration}ms`,\r\n    };\r\n\r\n    const fillRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (fillRef.current) fillRef.current.classList.add('Progress-fill');\r\n        const interval = setInterval(() => {\r\n            if (fillRef.current) {\r\n                fillRef.current.classList.remove('Progress-fill');\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                const __forceReflow = fillRef.current.offsetHeight;\r\n                fillRef.current.classList.add('Progress-fill');\r\n            }\r\n\r\n            onTick();\r\n        }, duration);\r\n\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    return (\r\n        <div className=\"Progress-bar\">\r\n            <div ref={fillRef} style={style}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default React.memo(ProgressBar, (prevProps, nextProps) => {\r\n    if (prevProps.duration !== nextProps.duration) return false;\r\n\r\n    return true;\r\n});\r\n","import React from 'react';\r\nimport { ResourceState } from '../gamelogic/state';\r\nimport ResourceChart from './currency/ResourceChart';\r\nimport ProgressBar from './ProgressBar';\r\nimport './StatusHeader.css';\r\n\r\ninterface Props {\r\n    msPerTick: number;\r\n    resourceState: ResourceState;\r\n    onTick: () => any;\r\n    onHamburgerClick: () => any;\r\n}\r\n\r\nfunction StatusHeader(props: Props) {\r\n    const { msPerTick, onTick, resourceState } = props;\r\n\r\n    return (\r\n        <header className=\"Status-header\">\r\n            <div className=\"row\">\r\n                <span id=\"hamburger\" onClick={props.onHamburgerClick}>\r\n                    hamburger\r\n                </span>\r\n                <ResourceChart resourceState={resourceState} />\r\n            </div>\r\n            <ProgressBar duration={msPerTick} onTick={onTick} />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default StatusHeader;\r\n","import { MultiCost } from './cost';\r\nimport { Growth } from './growth';\r\n\r\nexport interface BuildingDetails {\r\n    type: BuildingID;\r\n    displayName: string;\r\n    growth: Growth;\r\n    cost: MultiCost;\r\n}\r\n\r\nexport type BuildingID = 'basic';\r\n\r\nconst buildings: BuildingDetails[] = [\r\n    {\r\n        type: 'basic',\r\n        displayName: 'Baseline',\r\n        growth: {\r\n            type: 'binomial',\r\n            resource: 'score',\r\n            p: 1.0,\r\n        },\r\n        cost: [\r\n            {\r\n                type: 'exponential',\r\n                resource: 'score',\r\n                initial: 1,\r\n                factor: 2,\r\n                roundToNearest: 1,\r\n            },\r\n        ],\r\n    },\r\n];\r\n\r\ntype BuildingMap = { [id in BuildingID]: BuildingDetails };\r\nexport const buildingDetails: BuildingMap = Object.fromEntries(\r\n    buildings.map((b) => [b.type, b as BuildingDetails])\r\n) as BuildingMap;\r\n","import React, { useCallback, useEffect, useReducer, useState } from 'react';\nimport './App.css';\nimport BuildingCard from './components/buildings/BuildingCard';\nimport BuyButton from './components/BuyButton';\nimport Router, { changePage, initialPageLinks } from './components/Router';\nimport Sidebar from './components/Sidebar';\nimport StatusHeader from './components/StatusHeader';\nimport {\n    BuildingDetails,\n    buildingDetails,\n} from './gamelogic/building/buildinglist';\nimport { gameReducer, loadGameState, saveGameState } from './gamelogic/state';\n\nfunction App() {\n    const [gameState, gameDispatch] = useReducer(gameReducer, {\n        resourceState: {\n            score: 1.0,\n        },\n        buildings: [],\n        lastUpdate: null,\n    });\n\n    const msPerTick = 5000;\n\n    const [pagelinks, navigatePage] = useReducer(changePage, initialPageLinks);\n\n    // Load game, fast-forwarding to current time\n    useEffect(() => {\n        const loadedState = loadGameState();\n        if (loadedState != null && loadedState.lastUpdate != null) {\n            gameDispatch({ type: 'assign', newState: loadedState });\n\n            const now = new Date().getTime();\n            const delta = now - loadedState.lastUpdate;\n            const updateCount = Math.floor(delta / msPerTick);\n\n            gameDispatch({\n                type: 'fastForward',\n                count: updateCount,\n                when: now,\n            });\n        }\n    }, []);\n\n    const tick = useCallback(() => {\n        gameDispatch({\n            type: 'fastForward',\n            count: 1,\n            when: new Date().getTime(),\n        });\n    }, []);\n\n    useEffect(() => {\n        saveGameState(gameState);\n    }, [gameState]);\n\n    const buyBasic = useCallback(() => {\n        gameDispatch({\n            type: 'tryPurchaseBuilding',\n            building: buildingDetails['basic'],\n        });\n    }, [gameDispatch]);\n\n    const [sidebarActive, setSidebarActive] = useState(false);\n\n    const toggleSidebar = useCallback(() => {\n        setSidebarActive((v) => !v);\n    }, [setSidebarActive]);\n\n    return (\n        <div className=\"App\">\n            <Sidebar\n                pages={pagelinks}\n                active={sidebarActive}\n                onDismiss={() => setSidebarActive(false)}\n                onNavigate={(page) => {\n                    navigatePage(page);\n                    setSidebarActive(false);\n                }}\n            ></Sidebar>\n            <div className=\"Col\">\n                <StatusHeader\n                    onTick={tick}\n                    onHamburgerClick={toggleSidebar}\n                    msPerTick={msPerTick}\n                    resourceState={gameState.resourceState}\n                />\n                <div className=\"Primary-container\">\n                    <Router\n                        pageState={pagelinks}\n                        pages={{\n                            building: (\n                                <>\n                                    {gameState.buildings.map(\n                                        (\n                                            building: BuildingDetails,\n                                            i: number\n                                        ) => (\n                                            <BuildingCard\n                                                building={building}\n                                                key={i}\n                                            />\n                                        )\n                                    )}\n                                </>\n                            ),\n                            buy: (\n                                <BuyButton\n                                    onClick={buyBasic}\n                                    building={buildingDetails['basic']}\n                                    buildings={gameState.buildings}\n                                    resources={gameState.resourceState}\n                                />\n                            ),\n                        }}\n                    ></Router>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}