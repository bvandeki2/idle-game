{"version":3,"sources":["components/currency/images/credit.svg","components/currency/images/land.svg","components/currency/images/redcircle.svg","components/currency/images/greencircle.svg","components/currency/images/bluecircle.svg","gamelogic/building/buildinglist.ts","components/buildings/BuildingCard.tsx","components/BuyButton.tsx","components/currency/CurrencyAmount.tsx","components/currency/ResourceChart.tsx","components/ProgressBar.tsx","components/StatusHeader.tsx","gamelogic/building/growth.ts","gamelogic/state.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","buildingDetails","basic","displayName","growth","type","resource","p","cost","initial","factor","roundToNearest","BuildingCard","props","className","building","BuyButton","value","onClick","MakeCurrencyComponent","image","alt","src","amount","toLocaleString","CreditAmount","credit","LandAmount","land","RedCircleAmount","redcircle","GreenCircleAmount","greencircle","BlueCircleAmount","bluecircle","ResourceChart","resourceState","score","ProgressBar","duration","onTick","style","animationDuration","fillRef","useRef","useEffect","current","classList","add","interval","setInterval","remove","offsetHeight","clearInterval","ref","React","memo","msPerTick","prevProps","nextProps","applyBuildingGrowth","updateCount","growthKind","randomBinomial","gameReducer","state","action","newState","newResourceState","buildings","computeResourceState","count","lastUpdate","when","localStorage","setItem","JSON","stringify","saveGameState","App","useReducer","gameState","gameDispatch","loadedState","save","getItem","parse","loadGameState","now","Date","getTime","delta","Math","floor","tick","useCallback","buyBasic","map","i","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gRCW9BC,G,MAA2D,CACpEC,MAAO,CACHC,YAAa,WACbC,OAAQ,CACJC,KAAM,WACNC,SAAU,QACVC,EAAG,GAEPC,KAAM,CACFH,KAAM,cACNC,SAAU,QACVG,QAAS,EACTC,OAAQ,EACRC,eAAgB,M,MCHbC,MAVf,SAAsBC,GAClB,OACI,yBAAKC,UAAU,iBACX,8BAAOb,EAAgBY,EAAME,UAAUZ,aACvC,6BACA,8BAAOU,EAAME,Y,MCMVC,MAVf,SAAmBH,GACf,OACI,2BACIR,KAAK,SACLY,MAAK,cAAShB,EAAgBY,EAAME,UAAUZ,aAC9Ce,QAASL,EAAMK,W,0FCL3B,SAASC,EAAsBC,EAAeC,GAC1C,OAAO,SAAUR,GACb,OACI,yBAAKC,UAAU,UACX,yBAAKQ,IAAKF,EAAON,UAAU,OAAOO,IAAKA,IACvC,yBAAKP,UAAU,YAAYD,EAAMU,OAAOC,oBAMxD,IAAMC,EAAeN,EAAsBO,IAAQ,WAC7CC,EAAaR,EAAsBS,IAAM,QACzCC,EAAkBV,EAAsBW,IAAW,aACnDC,EAAoBZ,EAAsBa,IAAa,eACvDC,EAAmBd,EAAsBe,IAAY,c,MCI5CC,MAhBf,SAAuBtB,GACnB,OACI,yBAAKC,UAAU,mBACX,yBAAKA,UAAU,gBACX,kBAACW,EAAD,CAAcF,OAAQV,EAAMuB,cAAcC,QAC1C,kBAACV,EAAD,CAAYJ,OAAQ,OAExB,yBAAKT,UAAU,gBACX,kBAACe,EAAD,CAAiBN,OAAQ,SACzB,kBAACQ,EAAD,CAAmBR,OAAQ,IAC3B,kBAACU,EAAD,CAAkBV,OAAQ,O,MCe3Be,MAhCf,SAAqBzB,GAAe,IACxB0B,EAAqB1B,EAArB0B,SAAUC,EAAW3B,EAAX2B,OAEZC,EAAuB,CACzBC,kBAAkB,GAAD,OAAKH,EAAL,OAGfI,EAAUC,iBAA8B,MAkB9C,OAhBAC,qBAAU,WACFF,EAAQG,SAASH,EAAQG,QAAQC,UAAUC,IAAI,iBACnD,IAAMC,EAAWC,aAAY,WACzB,GAAIP,EAAQG,QAAS,CACjBH,EAAQG,QAAQC,UAAUI,OAAO,iBAEXR,EAAQG,QAAQM,aACtCT,EAAQG,QAAQC,UAAUC,IAAI,iBAGlCR,MACDD,GAEH,OAAO,kBAAMc,cAAcJ,OAI3B,yBAAKnC,UAAU,gBACX,yBAAKwC,IAAKX,EAASF,MAAOA,M,MCZvBc,UAAMC,MAXrB,SAAsB3C,GAAe,IACzB4C,EAAqC5C,EAArC4C,UAAWjB,EAA0B3B,EAA1B2B,OAAQJ,EAAkBvB,EAAlBuB,cAE3B,OACI,4BAAQtB,UAAU,iBACd,kBAAC,EAAD,CAAesB,cAAeA,IAC9B,kBAAC,EAAD,CAAaG,SAAUkB,EAAWjB,OAAQA,QAKd,SAACkB,EAAWC,GAChD,OAAID,EAAUD,YAAcE,EAAUF,WAElCC,EAAUtB,gBAAkBuB,EAAUvB,iB,sCChBvC,SAASwB,EACZxB,EACAyB,EACAC,GAEA,OAAQA,EAAWzD,MACf,IAAK,WACD,OAAO,2BACA+B,GADP,kBAEK0B,EAAWxD,SACR8B,EAAc0B,EAAWxD,UACzByD,YAAeF,EAAaC,EAAWvD,EAAvCwD,MCgCb,SAASC,EAAYC,EAAkBC,GAC1C,OAAQA,EAAO7D,MACX,IAAK,SACD,OAAO6D,EAAOC,SAClB,IAAK,qBACD,IAAMC,EApClB,SACIH,EACAJ,GAEA,IADa,EACTzB,EAAgB6B,EAAM7B,cADb,cAGU6B,EAAMI,WAHhB,IAGb,2BAAwC,CAAC,IAA9BtD,EAA6B,QACpCqB,EAAgBwB,EACZxB,EACAyB,EACA5D,EAAgBc,GAAUX,SAPrB,8BAWb,OAAOgC,EAsB0BkC,CAAqBL,EAAOC,EAAOK,OACtDJ,EAAQ,2BACPF,GADO,IAEV7B,cAAegC,EACfI,WAAYN,EAAOO,OAGvB,OA/CL,SAAuBR,GAC1BS,aAAaC,QAAQ,WAAYC,KAAKC,UAAUZ,IA6CxCa,CAAcX,GACPA,EACX,IAAK,sBACD,OAAO,2BACAF,GADP,IAEII,UAAU,GAAD,mBAAMJ,EAAMI,WAAZ,CAAuBH,EAAOnD,cCAxCgE,MA7Df,WAAgB,IAAD,EACuBC,qBAAWhB,EAAa,CACtD5B,cAAe,CACXC,MAAO,GAEXgC,UAAW,GACXG,WAAY,OANL,mBACJS,EADI,KACOC,EADP,KAYXrC,qBAAU,WACN,IAAMsC,EDTP,WACH,IAAMC,EAAOV,aAAaW,QAAQ,YAClC,OAAID,EAAaR,KAAKU,MAAMF,GACrB,KCMiBG,GACpB,GAAmB,MAAfJ,GAAiD,MAA1BA,EAAYX,WAAoB,CACvDU,EAAa,CAAE7E,KAAM,SAAU8D,SAAUgB,IAEzC,IAAMK,GAAM,IAAIC,MAAOC,UACjBC,EAAQH,EAAML,EAAYX,WAC1BX,EAAc+B,KAAKC,MAAMF,EAVrB,KAYVT,EAAa,CACT7E,KAAM,qBACNkE,MAAOV,EACPY,KAAMe,OAGf,IAEH,IAAMM,EAAOC,uBAAY,WACrBb,EAAa,CACT7E,KAAM,qBACNkE,MAAO,EACPE,MAAM,IAAIgB,MAAOC,cAEtB,CAACR,IAEEc,EAAWD,uBAAY,WACzBb,EAAa,CACT7E,KAAM,sBACNU,SAAU,YAEf,CAACmE,IAEJ,OACI,yBAAKpE,UAAU,OACX,kBAAC,EAAD,CACI0B,OAAQsD,EACRrC,UAvCM,IAwCNrB,cAAe6C,EAAU7C,gBAE7B,yBAAKtB,UAAU,qBACX,kBAAC,EAAD,CAAWI,QAAS8E,EAAUjF,SAAS,UACtCkE,EAAUZ,UAAU4B,KAAI,SAAClF,EAAsBmF,GAAvB,OACrB,kBAAC,EAAD,CAAcnF,SAAUA,EAAUoF,IAAKD,UClDvCE,QACa,cAA7BC,OAAOC,SAASC,UAEiB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZZC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SD+HpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAACC,GACHA,EAAaC,gBAEhBC,OAAM,SAACC,GACJC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f413d06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/credit.7abc0ac4.svg\";","module.exports = __webpack_public_path__ + \"static/media/land.787d1085.svg\";","module.exports = __webpack_public_path__ + \"static/media/redcircle.5819b0ee.svg\";","module.exports = __webpack_public_path__ + \"static/media/greencircle.3ea27515.svg\";","module.exports = __webpack_public_path__ + \"static/media/bluecircle.3cc723b7.svg\";","import { Cost } from './cost';\r\nimport { Growth } from './growth';\r\n\r\ninterface BuildingDetails {\r\n    displayName: string;\r\n    growth: Growth;\r\n    cost: Cost;\r\n}\r\n\r\nexport type BuildingID = 'basic';\r\n\r\nexport const buildingDetails: { [id in BuildingID]: BuildingDetails } = {\r\n    basic: {\r\n        displayName: 'Baseline',\r\n        growth: {\r\n            type: 'binomial',\r\n            resource: 'score',\r\n            p: 1.0,\r\n        },\r\n        cost: {\r\n            type: 'exponential',\r\n            resource: 'score',\r\n            initial: 1,\r\n            factor: 2,\r\n            roundToNearest: 1,\r\n        },\r\n    },\r\n};\r\n","import React from 'react';\r\nimport {\r\n    BuildingID,\r\n    buildingDetails,\r\n} from '../../gamelogic/building/buildinglist';\r\nimport './BuildingCard.css';\r\n\r\ninterface Props {\r\n    building: BuildingID;\r\n}\r\n\r\nfunction BuildingCard(props: Props) {\r\n    return (\r\n        <div className=\"Building-card\">\r\n            <span>{buildingDetails[props.building].displayName}</span>\r\n            <br />\r\n            <span>{props.building}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default BuildingCard;\r\n","import React from 'react';\r\nimport {\r\n    BuildingID,\r\n    buildingDetails,\r\n} from '../gamelogic/building/buildinglist';\r\nimport './BuyButton.css';\r\n\r\ninterface Props {\r\n    onClick: () => any;\r\n    building: BuildingID;\r\n}\r\n\r\nfunction BuyButton(props: Props) {\r\n    return (\r\n        <input\r\n            type=\"button\"\r\n            value={`Buy ${buildingDetails[props.building].displayName}`}\r\n            onClick={props.onClick}\r\n        />\r\n    );\r\n}\r\n\r\nexport default BuyButton;\r\n","import React from 'react';\r\nimport './CurrencyAmount.css';\r\nimport credit from './images/credit.svg';\r\nimport land from './images/land.svg';\r\nimport redcircle from './images/redcircle.svg';\r\nimport greencircle from './images/greencircle.svg';\r\nimport bluecircle from './images/bluecircle.svg';\r\n\r\ninterface Props {\r\n    amount: number;\r\n}\r\n\r\nfunction MakeCurrencyComponent(image: string, alt: string) {\r\n    return function (props: Props) {\r\n        return (\r\n            <div className=\"inline\">\r\n                <img src={image} className=\"icon\" alt={alt}></img>\r\n                <div className=\"quantity\">{props.amount.toLocaleString()}</div>\r\n            </div>\r\n        );\r\n    };\r\n}\r\n\r\nconst CreditAmount = MakeCurrencyComponent(credit, 'credits');\r\nconst LandAmount = MakeCurrencyComponent(land, 'land');\r\nconst RedCircleAmount = MakeCurrencyComponent(redcircle, 'redcircle');\r\nconst GreenCircleAmount = MakeCurrencyComponent(greencircle, 'greencircle');\r\nconst BlueCircleAmount = MakeCurrencyComponent(bluecircle, 'bluecircle');\r\n\r\nexport {\r\n    CreditAmount,\r\n    LandAmount,\r\n    RedCircleAmount,\r\n    GreenCircleAmount,\r\n    BlueCircleAmount,\r\n};\r\n","import React from 'react';\r\nimport { ResourceState } from '../../gamelogic/state';\r\nimport {\r\n    BlueCircleAmount,\r\n    CreditAmount,\r\n    GreenCircleAmount,\r\n    LandAmount,\r\n    RedCircleAmount,\r\n} from './CurrencyAmount';\r\nimport './ResourceChart.css';\r\n\r\ninterface Props {\r\n    resourceState: ResourceState;\r\n}\r\n\r\nfunction ResourceChart(props: Props) {\r\n    return (\r\n        <div className=\"Chart-container\">\r\n            <div className=\"Chart-column\">\r\n                <CreditAmount amount={props.resourceState.score} />\r\n                <LandAmount amount={100} />\r\n            </div>\r\n            <div className=\"Chart-column\">\r\n                <RedCircleAmount amount={104545} />\r\n                <GreenCircleAmount amount={5} />\r\n                <BlueCircleAmount amount={4} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ResourceChart;\r\n","import React, { CSSProperties, useEffect, useRef } from 'react';\r\nimport './ProgressBar.css';\r\n\r\ninterface Props {\r\n    duration: number;\r\n    onTick: () => any;\r\n}\r\n\r\nfunction ProgressBar(props: Props) {\r\n    const { duration, onTick } = props;\r\n\r\n    const style: CSSProperties = {\r\n        animationDuration: `${duration}ms`,\r\n    };\r\n\r\n    const fillRef = useRef<HTMLDivElement | null>(null);\r\n\r\n    useEffect(() => {\r\n        if (fillRef.current) fillRef.current.classList.add('Progress-fill');\r\n        const interval = setInterval(() => {\r\n            if (fillRef.current) {\r\n                fillRef.current.classList.remove('Progress-fill');\r\n                // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n                const __forceReflow = fillRef.current.offsetHeight;\r\n                fillRef.current.classList.add('Progress-fill');\r\n            }\r\n\r\n            onTick();\r\n        }, duration);\r\n\r\n        return () => clearInterval(interval);\r\n    });\r\n\r\n    return (\r\n        <div className=\"Progress-bar\">\r\n            <div ref={fillRef} style={style}></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ProgressBar;\r\n","import React from 'react';\r\nimport { ResourceState } from '../gamelogic/state';\r\nimport ResourceChart from './currency/ResourceChart';\r\nimport ProgressBar from './ProgressBar';\r\nimport './StatusHeader.css';\r\n\r\ninterface Props {\r\n    msPerTick: number;\r\n    resourceState: ResourceState;\r\n    onTick: () => any;\r\n}\r\n\r\nfunction StatusHeader(props: Props) {\r\n    const { msPerTick, onTick, resourceState } = props;\r\n\r\n    return (\r\n        <header className=\"Status-header\">\r\n            <ResourceChart resourceState={resourceState} />\r\n            <ProgressBar duration={msPerTick} onTick={onTick} />\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default React.memo(StatusHeader, (prevProps, nextProps) => {\r\n    if (prevProps.msPerTick !== nextProps.msPerTick) return false;\r\n    // if (prevProps.onTick !== nextProps.onTick) return false;\r\n    if (prevProps.resourceState !== nextProps.resourceState) return false;\r\n\r\n    return true;\r\n});\r\n","import { randomBinomial } from 'd3-random';\r\nimport { ResourceKind, ResourceState } from '../state';\r\n\r\ninterface BinomialGrowth {\r\n    type: 'binomial';\r\n    resource: ResourceKind;\r\n    p: number;\r\n}\r\nexport type Growth = BinomialGrowth;\r\n\r\nexport function applyBuildingGrowth(\r\n    resourceState: ResourceState,\r\n    updateCount: number,\r\n    growthKind: Growth\r\n): ResourceState {\r\n    switch (growthKind.type) {\r\n        case 'binomial':\r\n            return {\r\n                ...resourceState,\r\n                [growthKind.resource]:\r\n                    resourceState[growthKind.resource] +\r\n                    randomBinomial(updateCount, growthKind.p)(),\r\n            };\r\n    }\r\n}\r\n","import { buildingDetails, BuildingID } from './building/buildinglist';\r\nimport { applyBuildingGrowth } from './building/growth';\r\n\r\nexport type ResourceKind = 'score';\r\nexport type ResourceState = { [kind in ResourceKind]: number };\r\n\r\nexport interface GameState {\r\n    resourceState: ResourceState;\r\n    buildings: BuildingID[];\r\n    lastUpdate: number | null;\r\n}\r\n\r\nexport function loadGameState(): GameState | null {\r\n    const save = localStorage.getItem('saveFile');\r\n    if (save) return JSON.parse(save) as GameState;\r\n    return null;\r\n}\r\n\r\nexport function saveGameState(state: GameState) {\r\n    localStorage.setItem('saveFile', JSON.stringify(state));\r\n}\r\n\r\nfunction computeResourceState(\r\n    state: GameState,\r\n    updateCount: number\r\n): ResourceState {\r\n    let resourceState = state.resourceState;\r\n\r\n    for (const building of state.buildings) {\r\n        resourceState = applyBuildingGrowth(\r\n            resourceState,\r\n            updateCount,\r\n            buildingDetails[building].growth\r\n        );\r\n    }\r\n\r\n    return resourceState;\r\n}\r\n\r\ninterface AssignAction {\r\n    type: 'assign';\r\n    newState: GameState;\r\n}\r\ninterface FastForwardAndSaveAction {\r\n    type: 'fastForwardAndSave';\r\n    count: number;\r\n    when: number;\r\n}\r\ninterface TryPurchaseBuilding {\r\n    type: 'tryPurchaseBuilding';\r\n    building: BuildingID;\r\n}\r\ntype GameAction = AssignAction | FastForwardAndSaveAction | TryPurchaseBuilding;\r\nexport function gameReducer(state: GameState, action: GameAction): GameState {\r\n    switch (action.type) {\r\n        case 'assign':\r\n            return action.newState;\r\n        case 'fastForwardAndSave':\r\n            const newResourceState = computeResourceState(state, action.count);\r\n            const newState = {\r\n                ...state,\r\n                resourceState: newResourceState,\r\n                lastUpdate: action.when,\r\n            };\r\n            saveGameState(newState);\r\n            return newState;\r\n        case 'tryPurchaseBuilding':\r\n            return {\r\n                ...state,\r\n                buildings: [...state.buildings, action.building],\r\n            };\r\n    }\r\n}\r\n","import React, { useCallback, useEffect, useReducer } from 'react';\nimport './App.css';\nimport BuildingCard from './components/buildings/BuildingCard';\nimport BuyButton from './components/BuyButton';\nimport StatusHeader from './components/StatusHeader';\nimport { BuildingID } from './gamelogic/building/buildinglist';\nimport { gameReducer, loadGameState } from './gamelogic/state';\n\nfunction App() {\n    const [gameState, gameDispatch] = useReducer(gameReducer, {\n        resourceState: {\n            score: 0.0,\n        },\n        buildings: [],\n        lastUpdate: null,\n    });\n\n    const msPerTick = 5000;\n\n    // Load game, fast-forwarding to current time\n    useEffect(() => {\n        const loadedState = loadGameState();\n        if (loadedState != null && loadedState.lastUpdate != null) {\n            gameDispatch({ type: 'assign', newState: loadedState });\n\n            const now = new Date().getTime();\n            const delta = now - loadedState.lastUpdate;\n            const updateCount = Math.floor(delta / msPerTick);\n\n            gameDispatch({\n                type: 'fastForwardAndSave',\n                count: updateCount,\n                when: now,\n            });\n        }\n    }, []);\n\n    const tick = useCallback(() => {\n        gameDispatch({\n            type: 'fastForwardAndSave',\n            count: 1,\n            when: new Date().getTime(),\n        });\n    }, [gameDispatch]);\n\n    const buyBasic = useCallback(() => {\n        gameDispatch({\n            type: 'tryPurchaseBuilding',\n            building: 'basic',\n        });\n    }, [gameDispatch]);\n\n    return (\n        <div className=\"App\">\n            <StatusHeader\n                onTick={tick}\n                msPerTick={msPerTick}\n                resourceState={gameState.resourceState}\n            />\n            <div className=\"Primary-container\">\n                <BuyButton onClick={buyBasic} building=\"basic\" />\n                {gameState.buildings.map((building: BuildingID, i: number) => (\n                    <BuildingCard building={building} key={i} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}